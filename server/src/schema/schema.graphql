"""The root of all queries"""
type Query {
  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
  items: [Item]!
  me: User!
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Item data"""
type Item implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  name: String!
  price: Int!
  type: ItemTypeEnum!
  createdAt: String
  updatedAt: String
}

enum ItemTypeEnum {
  GUN
  ARMOR
  SKILL
}

"""User data"""
type User implements Node {
  """The ID of an object"""
  id: ID!

  """mongoose _id"""
  _id: String!
  email: String!
  createdAt: String
  updatedAt: String
}

type Mutation {
  UserRegisterWithEmail(input: UserRegisterWithEmailInput!): UserRegisterWithEmailPayload
  UserLoginWithEmail(input: UserLoginWithEmailInput!): UserLoginWithEmailPayload
  CreateItem(input: CreateItemInput!): CreateItemPayload
}

type UserRegisterWithEmailPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserRegisterWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type UserLoginWithEmailPayload {
  token: String
  me: User
  clientMutationId: String
}

input UserLoginWithEmailInput {
  email: String!
  password: String!
  clientMutationId: String
}

type CreateItemPayload {
  item: Item
  clientMutationId: String
}

input CreateItemInput {
  name: String!
  price: Int!
  type: String!
  clientMutationId: String
}
